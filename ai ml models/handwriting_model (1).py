# -*- coding: utf-8 -*-
"""handwriting_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mLIlGaJKaqOQGPqNyMR8m_QxBIZ2jDEZ
"""

!apt-get update
!apt-get install -y tesseract-ocr
!pip install pytesseract

# Install required packages
!pip install pytesseract opencv-python numpy tensorflow keras matplotlib imutils

import cv2
import pytesseract
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from skimage.metrics import structural_similarity as ssim

# Upload the image
uploaded = files.upload()

for file_name in uploaded.keys():
    # Read the image in grayscale
    image = cv2.imread(file_name, cv2.IMREAD_GRAYSCALE)

    # Resize the image to enhance recognition
    image = cv2.resize(image, (400, 100))  # Resize to improve accuracy
    _, thresh = cv2.threshold(image, 150, 255, cv2.THRESH_BINARY_INV)  # Improve text visibility

    # Use Tesseract OCR to extract text
    extracted_text = pytesseract.image_to_string(thresh, config='--psm 6').strip()
    print(extracted_text)
    # Generate a reference text image
    font = cv2.FONT_HERSHEY_SIMPLEX
    ref_image = np.ones((100, 400), dtype=np.uint8) * 255  # White background
    cv2.putText(ref_image, extracted_text, (10, 60), font, 2, (0,), 3, cv2.LINE_AA)  # Standardized text

    # Compute similarity score
    similarity_score = ssim(thresh, ref_image)

    # Display results
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(thresh, cmap='gray')
    plt.title("Uploaded Handwriting")

    plt.subplot(1, 2, 2)
    plt.imshow(ref_image, cmap='gray')
    plt.title("Reference Handwriting")

    plt.show()

    print(f"Extracted Text: {extracted_text}")
    print(f"Handwriting Accuracy: {similarity_score * 100:.2f}%")

